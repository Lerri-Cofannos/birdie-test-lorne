{"version":3,"sources":["services/getPatientList.tsx","hooks/patientContext.tsx","components/Header/Header.tsx","helpers/displayer.tsx","services/getPatientEvents.tsx","components/Observation/Observation.tsx","components/Visit/Visit.tsx","components/DataDisplay/DataDisplay.tsx","components/Footer/Footer.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["setPatientList","setPatient","a","route","axios","get","catch","err","console","log","response","status","patientList","data","PatientContext","React","createContext","undefined","PatientProvider","children","useState","index","id","name","patient","Provider","value","usePatient","context","useContext","Error","Header","className","src","alt","dispDate","timestampToClean","Date","toLocaleDateString","dispTime","toLocaleTimeString","setData","then","resData","Observation","obs","title","text","length","timestamp","replace","split","join","formatDescription","description","Visit","visit","i","eventName","map","event","caregiverId","observations","height","Math","random","toString","Loader","DataDisplay","filter","useMemo","dateFilter","setDateFilter","display","setDisplay","render","setRender","click","splice","useEffect","getPatientEvents","displayVisitArray","item","event0","isDateValid","Checkbox","slider","label","defaultChecked","onChange","toggle","type","e","target","key","Footer","App","patientDisp","setPatientDisp","selected","setSelected","patientClick","patientFromId","JSON","parse","getPatientList","pat","stringify","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cd0778c.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport axios from 'axios';\n\nexport default async function getPatientList(\n  setPatientList: Function,\n  setPatient: Function\n) {\n  const route: string = '/data/patientList';\n\n  const response = await axios.get(route).catch(err => {\n    console.log('Server error: ', err);\n  });\n\n  if (response && response.status === 200) {\n    const patientList = response.data;\n    console.log(`successful response from ${route}: `, patientList);\n    setPatientList(patientList);\n    setPatient(patientList[0]);\n  } else if (response) {\n    console.log(response.data.err);\n  } else {\n    console.log('Server error');\n  }\n}\n","import React, { Dispatch, useContext, useState } from 'react';\n\nimport { IPatient } from 'helpers/types';\n\ninterface DefaultType {\n  patient: IPatient;\n  setPatient: Dispatch<IPatient>;\n}\n\nconst PatientContext = React.createContext<DefaultType | undefined>(undefined);\n\nexport function PatientProvider({ children }: { children: React.ReactNode }) {\n  const defaultPatient: IPatient = {\n    index: -1,\n    id: '404',\n    name: 'waiting for patient',\n  };\n  const [patient, setPatient] = useState<IPatient>(defaultPatient);\n\n  return (\n    <PatientContext.Provider\n      value={{\n        patient,\n        setPatient,\n      }}\n    >\n      {children}\n    </PatientContext.Provider>\n  );\n}\n\nexport default function usePatient() {\n  const context = useContext(PatientContext);\n  if (context) {\n    return context;\n  }\n  throw new Error('data is undefined yet');\n}\n","import React from 'react';\nimport './Header.css';\n\nexport default function Header() {\n  return (\n    <div className='Header'>\n      <img\n        className='Header-logo'\n        src='https://assets.website-files.com/5d80c03f1edd7bd68fcdb623/5d80c151ddf52828d3cff080_Birdie%20-%20Logo%20-%20Blue%20%2B%20Green.svg'\n        alt='logo'\n      />\n      <p className='Header-text'>Test web application</p>\n    </div>\n  );\n}\n","export function dispDate(timestampToClean: string): string {\n  const date = new Date(timestampToClean);\n  return date.toLocaleDateString();\n}\n\nexport function dispTime(timestampToClean: string): string {\n  const date = new Date(timestampToClean);\n  return date.toLocaleTimeString();\n}\n","/* eslint-disable no-console */\nimport axios from 'axios';\n\nexport default async function getPatientEvents(id: string, setData: Function) {\n  if (id !== '404') {\n    const route: string = `/data/${id}`;\n    await axios\n      .get(route)\n      .then(response => {\n        if (response) {\n          const resData = response.data;\n          console.log(`Successful response from backend at ${route}`);\n          if (response.status === 200 && typeof resData === 'object') {\n            setData(resData);\n            console.log(`patient changed`);\n          } else {\n            console.log(`Error from ${route}: `, resData.err);\n            setData(resData.err);\n          }\n        }\n      })\n      .catch(err => {\n        console.log('Server error: ', err);\n      });\n  } else {\n    const route: string = '/hello';\n    await axios\n      .get(route)\n      .then(response => {\n        if (response) {\n          console.log(`Successful response from backend at ${route}`);\n          if (response.status === 200) {\n            console.log(response.data);\n          } else {\n            console.log(`Error from ${route}: `, response.data.err);\n          }\n        }\n      })\n      .catch(err => {\n        console.log('Server error: ', err);\n      });\n  }\n}\n","import React from 'react';\nimport { IObservation } from 'helpers/types';\nimport { dispDate, dispTime } from 'helpers/displayer';\nimport usePatient from 'hooks/patientContext';\n\nimport './Observation.css';\n\nexport default function Observation({ obs }: { obs: IObservation }) {\n  const { patient } = usePatient();\n  function formatDescription(text: string): string {\n    if (!text) return 'None';\n    if (text[text.length - 1] === 'Z') {\n      const timestamp = text;\n      return `${dispTime(timestamp)} - ${dispDate(timestamp)}`;\n    }\n    if (text === '[object Object]') return '[Confidential Data]';\n    const resu = text.replace(/\\[redacted\\]/g, patient.name);\n    return resu.split(';').join('\\n');\n  }\n\n  return (\n    <div className='observation'>\n      <p className='observation-title'>{obs.title} :</p>\n      <p className='observation-description'>\n        {formatDescription(obs.description)}\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Visit.css';\nimport { IEvent } from 'helpers/types';\nimport { dispDate, dispTime } from 'helpers/displayer';\nimport Observation from '../Observation';\n\nexport default function Visit({ visit }: { visit: IEvent[] }) {\n  let id = '';\n  let i = 0;\n  while (id === '' && i < visit.length) {\n    if (visit[i].visit) id = `id: ${visit[i].visit}`;\n    i += 1;\n  }\n  let title: string;\n  if (id === '') {\n    if (visit[0].eventName === 'Alert raised') {\n      title = 'ALERT';\n    } else {\n      title = `Special event on the ${dispDate(visit[0].timestamp)}`;\n    }\n  } else {\n    title = `Visit of the ${dispDate(visit[0].timestamp)}`;\n  }\n  return (\n    <div className='visit-display'>\n      <div className='circle border' />\n      <div className='visit-container'>\n        <div className='visit-header'>\n          <p className='visit-title'>{title}</p>\n          <p className='id'>{id}</p>\n        </div>\n        {visit.map(event => {\n          const { caregiverId, timestamp, eventName, observations } = event;\n          return (\n            <div key={Math.random().toString()}>\n              <div className='event-head'>\n                {`${dispDate(timestamp)} at ${dispTime(timestamp)} - `}\n                {eventName === 'Alert raised' && (\n                  <img\n                    src='/warning.jpeg'\n                    alt='Warning'\n                    height='20'\n                    className='warning'\n                  />\n                )}\n                {eventName}\n              </div>\n              <p className='id event'>\n                {caregiverId ? `caregiver: ${caregiverId}` : ''}\n              </p>\n              <div className='circle event-position' />\n              <div className='event-observations'>\n                {observations &&\n                  observations.map(obs => {\n                    return (\n                      <Observation\n                        obs={obs}\n                        key={`${obs.title}${Math.random().toString()}`}\n                      />\n                    );\n                  })}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { Default } from 'react-awesome-spinners';\nimport { Checkbox } from 'semantic-ui-react';\n\nimport './DataDisplay.css';\nimport { dispDate } from 'helpers/displayer';\n\nimport getPatientEvents from 'services/getPatientEvents';\nimport { IEvent } from 'helpers/types';\nimport usePatient from 'hooks/patientContext';\n\nimport Visit from '../Visit';\n\nfunction Loader() {\n  return (\n    <div className='load-container'>\n      Fetching data\n      <Default />\n    </div>\n  );\n}\n\nexport default function DataDisplay() {\n  const [data, setData] = useState<IEvent[][]>();\n  const { patient } = usePatient();\n  const filter: Array<boolean> = useMemo(() => [true, false, false, false], []);\n  const [dateFilter, setDateFilter] = useState<string>('2019-06-06');\n  const [display, setDisplay] = useState<IEvent[][] | undefined>();\n  const [render, setRender] = useState<boolean>(true);\n\n  useEffect(() => {\n    setData(undefined);\n    getPatientEvents(patient.id, setData);\n  }, [patient]);\n\n  useEffect(() => {\n    const displayVisitArray =\n      data &&\n      data.filter(item => {\n        const event0 = item[0];\n        const isDateValid =\n          !filter[3] || dispDate(event0.timestamp) === dispDate(dateFilter);\n        if (event0.visit === undefined) {\n          if (event0.eventName === 'Alert raised') {\n            return filter[1] && isDateValid;\n          }\n          return filter[2] && isDateValid;\n        }\n        return filter[0] && isDateValid;\n      });\n    setDisplay(displayVisitArray);\n  }, [data, filter, render, dateFilter]);\n\n  function click(i: number): void {\n    filter.splice(i, 1, !filter[i]);\n    setRender(!render);\n  }\n\n  function datePicked(e: any): void {\n    setDateFilter(e.target.value);\n  }\n\n  return (\n    <>\n      <div className='data-header'>\n        <div className='form-group'>\n          <p className='form-text'>Choose which data to display:</p>\n          <form className='form-container'>\n            <Checkbox\n              slider\n              label=' Visits'\n              defaultChecked\n              onChange={() => click(0)}\n            />\n            <Checkbox toggle label=' Alert raised' onChange={() => click(1)} />\n            <Checkbox\n              toggle\n              label=' No medication observation received'\n              onChange={() => click(2)}\n            />\n            <div className='date-chooser'>\n              <Checkbox\n                toggle\n                label=' From a specific date: '\n                onChange={() => click(3)}\n              />\n              <input type='date' value={dateFilter} onChange={datePicked} />\n            </div>\n          </form>\n        </div>\n        <div className='patient-data'>\n          Patient: {patient.name}\n          <p className='id'>Patient Id: {patient.id}</p>\n        </div>\n      </div>\n      <div className='scroll-container'>\n        <div className='timeline' />\n        <div className='scroll border'>\n          {display ? (\n            display.map(item => {\n              const key = Math.random().toString();\n              return <Visit visit={item} key={key} />;\n            })\n          ) : (\n            <Loader />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport './Footer.css';\n\nexport default function Footer() {\n  return (\n    <div className='Footer'>\n      <p className='Footer-text'>François Lorne</p>\n      <p className='Footer-text'>Friday 26th of November 2022</p>\n      <p className='Footer-text'>Stage 1 of recruitement</p>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport getPatientList from 'services/getPatientList';\nimport { IPatient } from 'helpers/types';\nimport usePatient from 'hooks/patientContext';\n\nimport Header from './Header';\nimport DataDisplay from './DataDisplay';\nimport Footer from './Footer';\n\nfunction App() {\n  const { setPatient } = usePatient();\n  const [patientList, setPatientList] = useState<IPatient[]>();\n  const [patientDisp, setPatientDisp] = useState<Object[]>([]);\n  const [selected, setSelected] = useState<number>(0);\n\n  useEffect(() => {\n    getPatientList(setPatientList, setPatient);\n  }, [setPatient]);\n\n  useEffect(\n    () =>\n      patientList &&\n      setPatientDisp(\n        patientList.map(patient => {\n          return {\n            index: patient.index,\n            id: patient.id,\n            name: patient.name,\n            selected: selected === patient.index,\n          };\n        })\n      ),\n    [patientList, selected]\n  );\n\n  function patientClick(e: any) {\n    const patientFromId = JSON.parse(e.target.id);\n    setPatient(patientFromId);\n    setSelected(patientFromId.index);\n  }\n  return (\n    <div className='App'>\n      <Header />\n      <div className='body-container border'>\n        <div className='top-line' />\n        <div className='btn-row'>\n          {patientDisp &&\n            patientDisp.map((pat: any) => {\n              if (pat.selected) {\n                return (\n                  <div\n                    className='tab selected'\n                    id={JSON.stringify(pat)}\n                    key={pat.name}\n                  >\n                    {pat.index + 1}. {pat.name}\n                  </div>\n                );\n              }\n              return (\n                <button\n                  className='tab'\n                  type='button'\n                  id={JSON.stringify(pat)}\n                  onClick={patientClick}\n                  key={pat.name}\n                >\n                  {pat.index + 1}. {pat.name}\n                </button>\n              );\n            })}\n        </div>\n        <DataDisplay />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { PatientProvider } from './hooks/patientContext';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PatientProvider>\n      <App />\n    </PatientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}